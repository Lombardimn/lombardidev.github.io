---
import '@/style/global.css';

interface Props {
    title?: string | undefined;
    description?: string | undefined;
}

const {
    title = 'Matias Lombardi: Personal Site',
    description = 'The personal site of Matias Lombardi'
} = Astro.props
---

<meta charset="UTF-8">
<meta name="description" property='og:description' content={description}>
<meta name="viewport" content="width=device-width">
<meta name="generator" content={Astro.generator}>

<title>{title}</title>

<link 
    rel="icon" 
    href="/public/assets/icons/logo2.png" 
    type="image/x-icon" sizes="144x144"
>
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link 
    href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<script is:inline>
    /**
     * Este código es en línea dentro de la cabecera para hacer el modo oscuro instantáneo y de bloqueo.
     */ 
    const getThemePreference = () =>{
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')){
            return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    const isDark = getThemePreference() === 'dark';
    document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

    if (typeof localStorage !== 'undefined') {
        /** Observamos el elemento del documento y mantenemos la preferencia del usuario cuando cambia. */
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('theme-dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });

        observer.observe(document.documentElement, {
            attributes: true, 
            attributeFilter: ['class']
        })
    }
</script>